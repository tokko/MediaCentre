version: '3.8'

# Define common environment variables for *arr stack and media servers
x-media-common-env: &media-common-env
  PUID: 1000
  PGID: 1000
  TZ: Europe/Stockholm

services:

  sonarr:
    image: linuxserver/sonarr:latest
    environment:
      <<: *media-common-env
      DB_CONNECTION_STRING: "Host=postgres;Port=5432;Database=sonarr;Username=media_user;Password=${SONARR_DB_PASSWORD:-media_pass}"
      DB_LOG_CONNECTION_STRING: "Host=postgres;Port=5432;Database=sonarr_log;Username=media_user;Password=${SONARR_DB_LOG_PASSWORD:-media_pass}"
    volumes:
      - /mnt/data/config_nsf/sonarr:/config
      - /mnt/data/media/tv:/tv
      - /mnt/data/media/downloads:/downloads
    networks:
      - ingress_network
    depends_on: # Corrected: simple list for Swarm
      - postgres
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.sonarr.rule=Host(`sonarr`)
        - traefik.http.routers.sonarr.entrypoints=web
        - traefik.http.services.sonarr.loadbalancer.server.port=8989
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8989/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  radarr:
    image: linuxserver/radarr:latest
    environment:
      <<: *media-common-env
      DB_CONNECTION_STRING: "Host=postgres;Port=5432;Database=radarr;Username=media_user;Password=${RADARR_DB_PASSWORD:-media_pass}"
      DB_LOG_CONNECTION_STRING: "Host=postgres;Port=5432;Database=radarr_log;Username=media_user;Password=${RADARR_DB_LOG_PASSWORD:-media_pass}"
    volumes:
      - /mnt/data/config_nfs/radarr:/config
      - /mnt/data/media/movies:/movies
      - /mnt/data/media/downloads:/downloads
    networks:
      - ingress_network
    depends_on: # Corrected
      - postgres
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.radarr.rule=Host(`radarr`)
        - traefik.http.routers.radarr.entrypoints=web
        - traefik.http.services.radarr.loadbalancer.server.port=7878
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7878/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prowlarr:
    image: linuxserver/prowlarr:latest
    environment:
      <<: *media-common-env
      LOG_LEVEL: trace
      PROXY_HOST: tor_proxy
      PROXY_PORT: "9050" # Quoted for consistency
      DB_CONNECTION_STRING: "Host=postgres;Port=5432;Database=prowlarr;Username=media_user;Password=${PROWLARR_DB_PASSWORD:-media_pass}"
      DB_LOG_CONNECTION_STRING: "Host=postgres;Port=5432;Database=prowlarr_log;Username=media_user;Password=${PROWLARR_DB_LOG_PASSWORD:-media_pass}"
    volumes:
      - /mnt/data/config_nfs/prowlarr:/config
    networks:
      - ingress_network
    depends_on: # Corrected
      - postgres
      - tor_proxy # Still good to hint dependency on tor_proxy
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.prowlarr.rule=Host(`prowlarr
        - traefik.http.routers.prowlarr.entrypoints=web
        - traefik.http.services.prowlarr.loadbalancer.server.port=9696
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9696/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  overseerr:
    image: sctx/overseerr:latest
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_local/overseerr:/app/config
    networks:
      - ingress_network
    depends_on: # Corrected
      - postgres
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.overseerr.rule=Host(`overseerr`)
        - traefik.http.routers.overseerr.entrypoints=web
        - traefik.http.services.overseerr.loadbalancer.server.port=5055
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      <<: *media-common-env
      DB_CONNECTION: "postgresql://media_user:${BAZARR_DB_PASSWORD:-media_pass}@postgres:5432/bazarr"
    volumes:
      - /mnt/data/config_nfs/bazarr:/config
      - /mnt/data/media/tv:/tv
      - /mnt/data/media/movies:/movies
    networks:
      - ingress_network
    depends_on: # Corrected
      - postgres
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.bazarr.rule=Host(`bazarr`)
        - traefik.http.routers.bazarr.entrypoints=web
        - traefik.http.services.bazarr.loadbalancer.server.port=6767
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure


  jellyfin:
    image: linuxserver/jellyfin:latest
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_local/jellyfin:/config
      - /mnt/data/media/movies:/data/movies
      - /mnt/data/media/tv:/data/tv
      - /mnt/data/media/music:/data/music
      - /dev/shm:/transcode
    ports:
      - "8096:8096"
    devices:
      - /dev/dri:/dev/dri
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.jellyfin.rule=Host(`jellyfin`) || Host(`jellyfin.granbacken.tplinkdns.com`)
        - traefik.http.routers.jellyfin.entrypoints=web
        - traefik.http.services.jellyfin.loadbalancer.server.port=8096
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8096/health || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

networks:
  ingress_network:
    external: true

secrets:
  nordvpn_username:
    external: true
  nordvpn_password:
    external: true
