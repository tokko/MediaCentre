version: '3.8' # This is a Docker Swarm stack file

x-media-common-env: &media-common-env
  PUID: "1000"
  PGID: "1000"
  TZ: "Europe/Stockholm"

services:
  sonarr:
    image: linuxserver/sonarr:latest
    environment:
      <<: *media-common-env
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "sonarr"
      DB_LOG_NAME: "sonarr_log"
    volumes:
      - sonarr_config:/config
      - media_tv:/tv
      - media_downloads:/downloads
    ports:
      - "8989:8989"
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.sonarr.rule=Host(`sonarr.local`)
        - traefik.http.routers.sonarr.entrypoints=web
        - traefik.http.services.sonarr.loadbalancer.server.port=8989
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure

  radarr:
    image: linuxserver/radarr:latest
    environment:
      <<: *media-common-env
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "radarr"
      DB_LOG_NAME: "radarr_log"
    volumes:
      - radarr_config:/config
      - media_movies:/movies
      - media_downloads:/downloads
    ports:
      - "7878:7878"
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.radarr.rule=Host(`radarr.local`)
        - traefik.http.routers.radarr.entrypoints=web
        - traefik.http.services.radarr.loadbalancer.server.port=7878
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure

  prowlarr:
    image: linuxserver/prowlarr:latest
    environment:
      <<: *media-common-env
      LOG_LEVEL: "trace"
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "prowlarr"
      DB_LOG_NAME: "prowlarr_log"
    volumes:
      - prowlarr_config:/config
    ports:
      - "9696:9696"
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.prowlarr.rule=Host(`prowlarr.local`)
        - traefik.http.routers.prowlarr.entrypoints=web
        - traefik.http.services.prowlarr.loadbalancer.server.port=9696
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  ombi:
    image: linuxserver/ombi:latest
    environment:
      <<: *media-common-env
      PGHOST: postgres.local
      PGPORT: 5432
      PGDATABASE: ombi
      PGUSER: media_user
      PGPASSWORD_FILE: /run/secrets/postgres_media_password
    volumes:
      - ombi_config:/config
    ports:
      - "3579:3579"
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.ombi.rule=Host(`ombi.local`)
        - traefik.http.routers.ombi.entrypoints=web
        - traefik.http.services.ombi.loadbalancer.server.port=3579
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      <<: *media-common-env
    volumes:
      - bazarr_config:/config
      - media_tv:/tv
      - media_movies:/movies
    ports:
      - "6767:6767"
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.bazarr.rule=Host(`bazarr.local`)
        - traefik.http.routers.bazarr.entrypoints=web
        - traefik.http.services.bazarr.loadbalancer.server.port=6767
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  jellyfin:
    image: linuxserver/jellyfin:latest
    environment:
      <<: *media-common-env
    volumes:
      - jellyfin_config:/config
      - media_movies:/data/movies
      - media_tv:/data/tv
      - media_music:/data/music
      - /dev/shm:/transcode
    ports:
      - "8096:8096"
    devices:
      - /dev/dri:/dev/dri
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.jellyfin.rule=Host(`jellyfin.local`) || Host(`jellyfin.granbacken.tplinkdns.com`)
        - traefik.http.routers.jellyfin.entrypoints=web
        - traefik.http.services.jellyfin.loadbalancer.server.port=8096
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m
      restart_policy:
        condition: on-failure

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    environment:
      <<: *media-common-env
      LOG_LEVEL: "info"
      LOG_HTML: "false"
      CAPTCHA_SOLVER: "none"
    ports:
      - "8191:8191"
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.flaresolverr.rule=Host(`flaresolverr.local`)
        - traefik.http.routers.flaresolverr.entrypoints=web
        - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m
      restart_policy:
        condition: on-failure

networks:
  ingress_network:
    external: true

secrets:
  postgres_media_password:
    external: true
  nordvpn_username:
    external: true
  nordvpn_password:
    external: true

volumes:
  sonarr_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/sonarr
  radarr_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/radarr
  prowlarr_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/prowlarr
  ombi_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/ombi
  bazarr_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/bazarr
  jellyfin_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/jellyfin
  subdownloader_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/subdownloader
  autobrr_config:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/data/nfs_config/autobrr
  media_tv:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/media/tv
  media_movies:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/media/movies
  media_downloads:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/media/downloads
  media_music:
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.68.10,rw,sync
      device: :/mnt/media/music
