version: '3.8' # This is a Docker Swarm stack file

x-media-common-env: &media-common-env
  PUID: "1000"
  PGID: "1000"
  TZ: "Europe/Stockholm"

services:
  sonarr:
    image: linuxserver/sonarr:latest
    environment:
      <<: *media-common-env
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "sonarr"
      DB_LOG_NAME: "sonarr_log"
    volumes:
      - /mnt/data/config_nfs/sonarr:/config
      - /mnt/data/media/tv:/tv
      - /mnt/data/media/downloads:/downloads
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.sonarr.rule=Host(`sonarr.local`)
        - traefik.http.routers.sonarr.entrypoints=web
        - traefik.http.services.sonarr.loadbalancer.server.port=8989
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure

  radarr:
    image: linuxserver/radarr:latest
    environment:
      <<: *media-common-env
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "radarr"
      DB_LOG_NAME: "radarr_log"
    volumes:
      - /mnt/data/config_nfs/radarr:/config
      - /mnt/data/media/movies:/movies
      - /mnt/data/media/downloads:/downloads
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.radarr.rule=Host(`radarr.local`)
        - traefik.http.routers.radarr.entrypoints=web
        - traefik.http.services.radarr.loadbalancer.server.port=7878
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 512m
        reservations:
          memory: 256m
      restart_policy:
        condition: on-failure

  prowlarr:
    image: linuxserver/prowlarr:latest
    environment:
      <<: *media-common-env
      LOG_LEVEL: "trace"
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "prowlarr"
      DB_LOG_NAME: "prowlarr_log"
      # If Prowlarr needs tor_proxy, and tor_proxy is removed, this will fail.
      # Consider if Prowlarr still needs a proxy or if this should be removed.
      # PROXY_HOST: tor_proxy 
      # PROXY_PORT: "9050"
    volumes:
      - /mnt/data/config_nfs/prowlarr:/config
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname != slave1
          - node.hostname != mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.prowlarr.rule=Host(`prowlarr.local`)
        - traefik.http.routers.prowlarr.entrypoints=web
        - traefik.http.services.prowlarr.loadbalancer.server.port=9696
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  overseerr:
    image: sctx/overseerr:latest
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_local/overseerr:/app/config
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.overseerr.rule=Host(`overseerr.local`)
        - traefik.http.routers.overseerr.entrypoints=web
        - traefik.http.services.overseerr.loadbalancer.server.port=5055
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure
  ombi:
    image: linuxserver/ombi:latest
    environment:
      <<: *media-common-env 
      DB_TYPE: "PostgreSQL"
      DB_HOST: "postgres.local"
      DB_PORT: "5432"
      DB_USERNAME: "media_user"
      DB_PASSWORD_FILE: "/run/secrets/postgres_media_password"
      DB_NAME: "ombi"
    volumes:
      - /mnt/data/config_nfs/ombi:/config
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.ombi.rule=Host(`ombi.local`)
        - traefik.http.routers.ombi.entrypoints=web
        - traefik.http.services.ombi.loadbalancer.server.port=3579
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_local/bazarr:/config
      - /mnt/data/media/tv:/tv
      - /mnt/data/media/movies:/movies
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.bazarr.rule=Host(`bazarr.local`)
        - traefik.http.routers.bazarr.entrypoints=web
        - traefik.http.services.bazarr.loadbalancer.server.port=6767
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  subdownloader:
    image: subdownloader/subdownloader:latest  # Verify the exact image name
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_nfs/subdownloader:/config
      - /mnt/data/media/tv:/tv
      - /mnt/data/media/movies:/movies
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.subdownloader.rule=Host(`subdownloader.local`)
        - traefik.http.routers.subdownloader.entrypoints=web
        - traefik.http.services.subdownloader.loadbalancer.server.port=8080  # Verify the port
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  autobrr:
    image: autobrr/autobrr:latest
    environment:
      <<: *media-common-env
      AUTOBRR__DATABASE_TYPE: "postgres"
      AUTOBRR__POSTGRES_HOST: "postgres.local"
      AUTOBRR__POSTGRES_PORT: "5432"
      AUTOBRR__POSTGRES_DATABASE: "autobrr"
      AUTOBRR__POSTGRES_USER: "media_user"
      AUTOBRR__POSTGRES_PASS_FILE: "/run/secrets/postgres_media_password"
    volumes:
      - /mnt/data/config_nfs/autobrr:/config
      - /mnt/data/media/downloads:/downloads
    networks:
      - ingress_network
    secrets:
      - source: postgres_media_password
        target: postgres_media_password
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.autobrr.rule=Host(`autobrr.local`)
        - traefik.http.routers.autobrr.entrypoints=web
        - traefik.http.services.autobrr.loadbalancer.server.port=7474
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
      restart_policy:
        condition: on-failure

  jellyfin:
    image: linuxserver/jellyfin:latest
    environment:
      <<: *media-common-env
    volumes:
      - /mnt/data/config_local/jellyfin:/config
      - /mnt/data/media/movies:/data/movies
      - /mnt/data/media/tv:/data/tv
      - /mnt/data/media/music:/data/music
      - /dev/shm:/transcode
    ports:
      - "8096:8096"
    devices:
      - /dev/dri:/dev/dri
    networks:
      - ingress_network
    deploy:
      placement:
        constraints:
          - node.hostname == mediaserver
      labels:
        - traefik.enable=true
        - traefik.http.routers.jellyfin.rule=Host(`jellyfin.local`) || Host(`jellyfin.granbacken.tplinkdns.com`)
        - traefik.http.routers.jellyfin.entrypoints=web
        - traefik.http.services.jellyfin.loadbalancer.server.port=8096
        - traefik.docker.network=ingress_network
      resources:
        limits:
          memory: 1024m
        reservations:
          memory: 512m
      restart_policy:
        condition: on-failure
networks:
  ingress_network:
    external: true

secrets:
  postgres_media_password:
    external: true
  nordvpn_username:
    external: true
  nordvpn_password:
    external: true
